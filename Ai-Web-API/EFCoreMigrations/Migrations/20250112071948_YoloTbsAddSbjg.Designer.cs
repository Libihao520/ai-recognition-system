// <auto-generated />
using System;
using EFCoreMigrations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCoreMigrations.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250112071948_YoloTbsAddSbjg")]
    partial class YoloTbsAddSbjg
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Model.Entities.AiModels", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("ModelCls")
                        .HasColumnType("longtext");

                    b.Property<string>("ModelName")
                        .HasColumnType("longtext");

                    b.Property<float?>("ModelSize")
                        .HasColumnType("float");

                    b.Property<string>("Path")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AiModels");
                });

            modelBuilder.Entity("Model.Entities.Photos", b =>
                {
                    b.Property<long>("PhotosId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("PhotoBase64")
                        .HasColumnType("longtext");

                    b.HasKey("PhotosId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Model.Entities.ReportCard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("CorrectQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfQuestions")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("longtext");

                    b.Property<string>("SubmittedOptions")
                        .HasColumnType("longtext");

                    b.Property<long?>("TestPapersManageId")
                        .HasColumnType("bigint");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ReportCards");
                });

            modelBuilder.Entity("Model.Entities.TestPapers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Choice1")
                        .HasColumnType("longtext");

                    b.Property<string>("Choice2")
                        .HasColumnType("longtext");

                    b.Property<string>("Choice3")
                        .HasColumnType("longtext");

                    b.Property<string>("Choice4")
                        .HasColumnType("longtext");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("longtext");

                    b.Property<string>("Topic")
                        .HasColumnType("longtext");

                    b.Property<int>("TopicNumber")
                        .HasColumnType("int");

                    b.Property<string>("answer")
                        .HasColumnType("longtext");

                    b.Property<long?>("testPapersManageId")
                        .HasColumnType("bigint");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("testPapersManageId");

                    b.ToTable("TestPapers");
                });

            modelBuilder.Entity("Model.Entities.TestPapersManage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("ExcelFilePath")
                        .HasColumnType("longtext");

                    b.Property<string>("FileLabel")
                        .HasColumnType("longtext");

                    b.Property<bool?>("HasAnsweringStarted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("QuestionBankCourseTitle")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TestPapersManages");
                });

            modelBuilder.Entity("Model.Entities.Users", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("PhotosId")
                        .HasColumnType("bigint");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Model.Entities.YoLoTbs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Cls")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<bool>("IsManualReview")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("PhotosId")
                        .HasColumnType("bigint");

                    b.Property<int>("RgMsCount")
                        .HasColumnType("int");

                    b.Property<string>("SbJg")
                        .HasColumnType("longtext");

                    b.Property<int>("SbJgCount")
                        .HasColumnType("int");

                    b.Property<int>("SbZqCount")
                        .HasColumnType("int");

                    b.Property<double>("Zhl")
                        .HasColumnType("double");

                    b.Property<double>("Zql")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("PhotosId");

                    b.ToTable("YoloTbs");
                });

            modelBuilder.Entity("Model.Entities.TestPapers", b =>
                {
                    b.HasOne("Model.Entities.TestPapersManage", null)
                        .WithMany("TestPapers")
                        .HasForeignKey("testPapersManageId");
                });

            modelBuilder.Entity("Model.Entities.YoLoTbs", b =>
                {
                    b.HasOne("Model.Entities.Photos", "Photos")
                        .WithMany()
                        .HasForeignKey("PhotosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Photos");
                });

            modelBuilder.Entity("Model.Entities.TestPapersManage", b =>
                {
                    b.Navigation("TestPapers");
                });
#pragma warning restore 612, 618
        }
    }
}
