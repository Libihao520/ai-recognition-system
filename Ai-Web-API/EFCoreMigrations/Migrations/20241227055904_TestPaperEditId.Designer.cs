// <auto-generated />
using System;
using EFCoreMigrations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCoreMigrations.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20241227055904_TestPaperEditId")]
    partial class TestPaperEditId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Model.Entitys.AiModels", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("ModelName")
                        .HasColumnType("longtext");

                    b.Property<float?>("ModelSizee")
                        .HasColumnType("float");

                    b.Property<string>("ModleCls")
                        .HasColumnType("longtext");

                    b.Property<string>("Path")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AiModels");
                });

            modelBuilder.Entity("Model.Entitys.Photos", b =>
                {
                    b.Property<long>("PhotosId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Photobase64")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PhotosId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Model.Entitys.ReportCard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("CorrectQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfQuestions")
                        .HasColumnType("int");

                    b.Property<string>("SubmittedOptions")
                        .HasColumnType("longtext");

                    b.Property<string>("subject")
                        .HasColumnType("longtext");

                    b.Property<int>("totalPoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ReportCards");
                });

            modelBuilder.Entity("Model.Entitys.TestPapers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Choice1")
                        .HasColumnType("longtext");

                    b.Property<string>("Choice2")
                        .HasColumnType("longtext");

                    b.Property<string>("Choice3")
                        .HasColumnType("longtext");

                    b.Property<string>("Choice4")
                        .HasColumnType("longtext");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TopicNumber")
                        .HasColumnType("int");

                    b.Property<string>("answer")
                        .HasColumnType("longtext");

                    b.Property<string>("subject")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("testPapersManageId")
                        .HasColumnType("bigint");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("testPapersManageId");

                    b.ToTable("testpapers");
                });

            modelBuilder.Entity("Model.Entitys.TestPapersManage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("ExcelFilePath")
                        .HasColumnType("longtext");

                    b.Property<string>("FileLabel")
                        .HasColumnType("longtext");

                    b.Property<bool?>("HasAnsweringStarted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("QuestionBankCourseTitle")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TestPapersManages");
                });

            modelBuilder.Entity("Model.Entitys.Users", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("PhotosId")
                        .HasColumnType("bigint");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Model.Entitys.Yolotbs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Cls")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<bool>("IsManualReview")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("PhotosId")
                        .HasColumnType("bigint");

                    b.Property<int>("rgmsCount")
                        .HasColumnType("int");

                    b.Property<int>("sbjgCount")
                        .HasColumnType("int");

                    b.Property<int>("sbzqCount")
                        .HasColumnType("int");

                    b.Property<double>("zhl")
                        .HasColumnType("double");

                    b.Property<double>("zql")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("PhotosId");

                    b.ToTable("yolotbs");
                });

            modelBuilder.Entity("Model.Entitys.TestPapers", b =>
                {
                    b.HasOne("Model.Entitys.TestPapersManage", null)
                        .WithMany("testPapers")
                        .HasForeignKey("testPapersManageId");
                });

            modelBuilder.Entity("Model.Entitys.Yolotbs", b =>
                {
                    b.HasOne("Model.Entitys.Photos", "Photos")
                        .WithMany()
                        .HasForeignKey("PhotosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Photos");
                });

            modelBuilder.Entity("Model.Entitys.TestPapersManage", b =>
                {
                    b.Navigation("testPapers");
                });
#pragma warning restore 612, 618
        }
    }
}
